{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Danell\\\\Desktop\\\\Proyectos_React\\\\NodeSend(Mern_Stack)\\\\sendmimg\\\\components\\\\Dropzone.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useCallback, useContext } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport appContext from '../context/app/appContext';\nimport authContext from '../context/auth/authContext';\nimport Formulario from './Form'; //use calback usado para multiples rendering de la app\n\nconst Dropzone = () => {\n  // Context de la app\n  const AppContext = useContext(appContext);\n  const {\n    cargando,\n    mostrarAlerta,\n    subirArchivo,\n    crearEnlace\n  } = AppContext; // Context de autenticación\n\n  const AuthContext = useContext(authContext);\n  const {\n    usuario,\n    autenticado\n  } = AuthContext;\n\n  const onDropRejected = () => {\n    mostrarAlerta('No se pudo subir, el Limite es 1MB, obten una cuenta gratis para subir archivos más grandes');\n  };\n\n  const onDropAccepted = useCallback(async acceptedFiles => {\n    // Crear un form Data\n    const formData = new FormData(); //crea el formdata\n\n    formData.append('archivo', acceptedFiles[0]);\n    subirArchivo(formData, acceptedFiles[0].path);\n  }, []);\n  const maxSize = autenticado ? 1000000000000 : 1000000; // Extraer contenido de Dropzone\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    acceptedFiles\n  } = useDropzone({\n    onDropAccepted,\n    onDropRejected,\n    maxSize\n  });\n  const archivos = acceptedFiles.map(archivo => __jsx(\"li\", {\n    key: archivo.lastModified,\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, archivo.path), __jsx(\"p\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, //mostrar en MB\n  (archivo.size / Math.pow(1024, 2)).toFixed(2), \" MB\")));\n  return __jsx(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, //Si tengo ya un archivo subido, se mostrara el listado de archivos para ponerle configuracion\n  //en caso contrario, subir un archivo\n  acceptedFiles.length > 0 ? __jsx(\"div\", {\n    className: \" text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, __jsx(\"h4\", {\n    className: \"headline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, \"Archivos\"), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, archivos), autenticado ? __jsx(Formulario, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 39\n    }\n  }) : \"\", //spinner  \n  cargando ? __jsx(\"p\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 33\n    }\n  }, \"Subiendo Archivo...\") : __jsx(\"button\", {\n    className: \"paper-btn btn-block button\",\n    onClick: () => crearEnlace(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 22\n    }\n  }, \"Crear Enlace\")) : __jsx(\"div\", _extends({}, getRootProps({\n    className: 'dropzone  paper container-lg card border-thick'\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }), __jsx(\"input\", _extends({\n    className: \"card-body\"\n  }, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  })), isDragActive ? __jsx(\"p\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 44\n    }\n  }, \" Suelta el archivo \") : __jsx(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }\n  }, __jsx(\"p\", {\n    className: \"second-button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 33\n    }\n  }, \"Selecciona un archivo y arrastralo aqu\\xED\"), __jsx(\"button\", {\n    className: \"paper-btn btn-block button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 33\n    }\n  }, \"Selecciona archivos para subir\"))));\n};\n\nexport default Dropzone;","map":{"version":3,"sources":["C:/Users/Danell/Desktop/Proyectos_React/NodeSend(Mern_Stack)/sendmimg/components/Dropzone.jsx"],"names":["React","useCallback","useContext","useDropzone","appContext","authContext","Formulario","Dropzone","AppContext","cargando","mostrarAlerta","subirArchivo","crearEnlace","AuthContext","usuario","autenticado","onDropRejected","onDropAccepted","acceptedFiles","formData","FormData","append","path","maxSize","getRootProps","getInputProps","isDragActive","archivos","map","archivo","lastModified","size","Math","pow","toFixed","length","className"],"mappings":"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","sourcesContent":["import React, {  useCallback, useContext } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport appContext from '../context/app/appContext';\r\nimport authContext from '../context/auth/authContext';\r\nimport Formulario from './Form';\r\n\r\n\r\n//use calback usado para multiples rendering de la app\r\nconst Dropzone = () => {\r\n\r\n    // Context de la app\r\n    const AppContext = useContext(appContext);\r\n    const { cargando, mostrarAlerta, subirArchivo, crearEnlace } = AppContext;\r\n\r\n    // Context de autenticación\r\n    const AuthContext = useContext(authContext);\r\n    const { usuario, autenticado } = AuthContext;\r\n\r\n    const onDropRejected = () => {\r\n        mostrarAlerta('No se pudo subir, el Limite es 1MB, obten una cuenta gratis para subir archivos más grandes');\r\n    }\r\n\r\n    const onDropAccepted = useCallback( async (acceptedFiles) => {\r\n        // Crear un form Data\r\n        const formData = new FormData();\r\n        //crea el formdata\r\n        formData.append('archivo', acceptedFiles[0]);\r\n\r\n        subirArchivo(formData, acceptedFiles[0].path);\r\n    }, []);\r\n\r\n\r\n    const maxSize = autenticado ? 1000000000000 : 1000000;\r\n\r\n    // Extraer contenido de Dropzone\r\n    const { getRootProps, getInputProps, isDragActive, acceptedFiles } = useDropzone({onDropAccepted, onDropRejected, maxSize});\r\n\r\n    const archivos = acceptedFiles.map( archivo => (\r\n        <li key={archivo.lastModified} className=\"\">\r\n            <p className=\"\">{archivo.path}</p> \r\n            <p className=\"\">{\r\n            //mostrar en MB\r\n            (archivo.size / Math.pow(1024, 2)).toFixed(2) } MB</p>\r\n        </li>\r\n    ) );\r\n\r\n\r\n\r\n\r\n    return ( \r\n        <div className=\"\">\r\n\r\n            { \r\n            //Si tengo ya un archivo subido, se mostrara el listado de archivos para ponerle configuracion\r\n            //en caso contrario, subir un archivo\r\n            acceptedFiles.length > 0 ? (\r\n                <div className=\" text-center\">\r\n                    <h4 className=\"headline\">Archivos</h4>\r\n                    <ul>\r\n                        {archivos}\r\n                    </ul>\r\n\r\n                    {\r\n                        autenticado ? <Formulario /> : \"\"\r\n                    }\r\n\r\n                     { //spinner  \r\n                     cargando ? <p className=\"\">Subiendo Archivo...</p> : (\r\n                     \r\n                     <button\r\n                            className=\"paper-btn btn-block button\"\r\n                            onClick={ () => crearEnlace()  }\r\n                        >\r\n                            Crear Enlace\r\n                        </button>\r\n                    )}\r\n\r\n\r\n                </div>\r\n\r\n            ) : (\r\n                <div { ...getRootProps({ className: 'dropzone  paper container-lg card border-thick' }) }>\r\n                    <input className=\"card-body\" { ...getInputProps() } />\r\n                        {\r\n                            isDragActive ? <p className=\"\"> Suelta el archivo </p> :\r\n                            <div className=\"\">\r\n                                <p className=\"second-button-text\">Selecciona un archivo y arrastralo aquí</p>\r\n                                <button className=\"paper-btn btn-block button\" >\r\n                                    Selecciona archivos para subir\r\n                                </button>\r\n                            </div>\r\n                        }\r\n                </div>\r\n            ) }\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Dropzone;"]},"metadata":{},"sourceType":"module"}