{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useCallback, useContext } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport appContext from '../context/app/appContext';\nimport authContext from '../context/auth/authContext';\nimport Formulario from './Form'; //use calback usado para multiples rendering de la app\n\nconst Dropzone = () => {\n  // Context de la app\n  const AppContext = useContext(appContext);\n  const {\n    cargando,\n    mostrarAlerta,\n    subirArchivo,\n    crearEnlace\n  } = AppContext; // Context de autenticación\n\n  const AuthContext = useContext(authContext);\n  const {\n    usuario,\n    autenticado\n  } = AuthContext;\n\n  const onDropRejected = () => {\n    mostrarAlerta('No se pudo subir, el Limite es 1MB, obten una cuenta gratis para subir archivos más grandes');\n  };\n\n  const onDropAccepted = useCallback(async acceptedFiles => {\n    // Crear un form Data\n    const formData = new FormData(); //crea el formdata\n\n    formData.append('archivo', acceptedFiles[0]);\n    subirArchivo(formData, acceptedFiles[0].path);\n  }, []);\n  const maxSize = autenticado ? 1000000000000 : 1000000; // Extraer contenido de Dropzone\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    acceptedFiles\n  } = useDropzone({\n    onDropAccepted,\n    onDropRejected,\n    maxSize\n  });\n  const archivos = acceptedFiles.map(archivo => __jsx(\"li\", {\n    key: archivo.lastModified,\n    className: \"\"\n  }, __jsx(\"p\", {\n    className: \"\"\n  }, archivo.path), __jsx(\"p\", {\n    className: \"\"\n  }, //mostrar en MB\n  (archivo.size / Math.pow(1024, 2)).toFixed(2), \" MB\")));\n  return __jsx(\"div\", {\n    className: \"\"\n  }, __jsx(\"br\", null), __jsx(\"br\", null), //Si tengo ya un archivo subido, se mostrara el listado de archivos para ponerle configuracion\n  //en caso contrario, subir un archivo\n  acceptedFiles.length > 0 ? __jsx(\"div\", {\n    className: \" text-center\"\n  }, __jsx(\"h4\", {\n    className: \"headline\"\n  }, \"Archivos\"), __jsx(\"ul\", null, archivos), autenticado ? __jsx(Formulario, null) : \"\", //spinner  \n  cargando ? __jsx(\"p\", {\n    className: \"\"\n  }, \"Subiendo Archivo...\") : __jsx(\"button\", {\n    className: \"paper-btn btn-block button\",\n    onClick: () => crearEnlace()\n  }, \"Crear Enlace\")) : __jsx(\"div\", getRootProps({\n    className: 'dropzone  paper container-lg card '\n  }), __jsx(\"div\", {\n    className: \"border-dotted border-thick margin-top-small padding-left-large \\r padding-right-large padding-top-large padding-bottom-large\"\n  }, __jsx(\"input\", _extends({\n    className: \"card-body\"\n  }, getInputProps())), isDragActive ? __jsx(\"p\", {\n    className: \"button-text\"\n  }, \" Suelta el archivo \") : __jsx(\"div\", {\n    className: \"\"\n  }, __jsx(\"p\", {\n    className: \"button-text\"\n  }, \"Selecciona un archivo y arrastralo aqu\\xED\"), __jsx(\"button\", {\n    className: \"paper-btn btn-block button\"\n  }, \"Selecciona archivos para subir\")))));\n};\n\nexport default Dropzone;","map":null,"metadata":{},"sourceType":"module"}