{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useEffect } from 'react';\nimport Layout from '../Components/Layout';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport Alerta from '../components/Alerta';\nimport { useRouter } from 'next/router';\nimport authContext from '../context/auth/authContext'; //npm i formik yup validacion de formularios\n//npm i react-dropzone con esto se suben las imagenes\n//usecontext crea el context \n//use reducer son las funciones que modifican el state\n//use state las acciones que disparan en el reducer\n//context. provider = da la data\n//context. consumer = recive la data\n\n/*\r\npara comunicarse el state con el reducer existen los\r\ntypes\r\nestos van el el objeto dispatch el cual son dos \r\nobjetos: el type  y el payload\r\ncon el type se evalua en el case de un switch\r\ncon el payload es que se modifican los datos del state\r\n           dispatch({\r\n                type: REGISTRO_ERROR,\r\n                payload: error.response.data.msg\r\n            })\r\n\r\n*/\n\nconst crear_Cuenta = () => {\n  const AuthContext = useContext(authContext);\n  const {\n    mensaje,\n    registrarUsuario\n  } = AuthContext;\n  const router = useRouter(); // Formulario y validación con formik y Yup\n\n  const formik = useFormik({\n    initialValues: {\n      nombre: '',\n      email: '',\n      password: ''\n    },\n    validationSchema: Yup.object({\n      nombre: Yup.string().required('El Nombre es Obligatorio'),\n      email: Yup.string().email('El email no es válido').required('El Email es Obligatorio'),\n      password: Yup.string().required('El password no puede ir vacio').min(8, 'El password debe contener al menos 8 caracteres')\n    }),\n    onSubmit: valores => {\n      registrarUsuario(valores);\n    }\n  });\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"text-center\"\n  }, mensaje && __jsx(Alerta, null), __jsx(\"h2\", {\n    className: \"headline\"\n  }, \"Crea una cuenta\"), __jsx(\"form\", {\n    className: \"paper form-group headline\",\n    onSubmit: formik.handleSubmit\n  }, __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Escribe tu nombre\",\n    id: \"nombre\",\n    value: formik.values.nombre,\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    className: \"input-block\"\n  }), formik.touched.nombre && formik.errors.nombre ? __jsx(\"div\", {\n    className: \"alert alert-danger button-text\"\n  }, formik.errors.nombre, \" \") : null, __jsx(\"input\", {\n    type: \"email\",\n    placeholder: \"Escribe tu correo\",\n    id: \"email\",\n    value: formik.values.email,\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    className: \"input-block\"\n  }), formik.touched.email && formik.errors.email ? __jsx(\"div\", {\n    className: \"alert alert-danger button-text\"\n  }, formik.errors.email, \" \") : null, __jsx(\"input\", {\n    type: \"password\",\n    placeholder: \"Escribe tu clave\",\n    id: \"password\",\n    value: formik.values.password1,\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    className: \"input-block\"\n  }), formik.touched.password && formik.errors.password ? __jsx(\"div\", {\n    className: \"alert alert-danger button-text\"\n  }, formik.errors.password, \" \") : null, __jsx(\"button\", {\n    className: \"btn-success btn-block\",\n    type: \"submit\"\n  }, \" Crear cuenta\"))));\n};\n\nexport default crear_Cuenta;","map":null,"metadata":{},"sourceType":"module"}